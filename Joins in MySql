### 1. Inner Join

Inner join returns only the rows that have matching values in both tables.

**Example:**
Suppose we have two tables `employees` and `departments`:

```sql
CREATE TABLE employees (
    emp_id INT PRIMARY KEY,
    emp_name VARCHAR(50),
    dept_id INT
);

CREATE TABLE departments (
    dept_id INT PRIMARY KEY,
    dept_name VARCHAR(50)
);

INSERT INTO employees (emp_id, emp_name, dept_id) VALUES
(1, 'John Doe', 1),
(2, 'Jane Smith', 2),
(3, 'Mike Johnson', 1);

INSERT INTO departments (dept_id, dept_name) VALUES
(1, 'HR'),
(2, 'IT');

-- Inner join example
SELECT employees.emp_name, departments.dept_name
FROM employees
INNER JOIN departments ON employees.dept_id = departments.dept_id;
```

In this example, `INNER JOIN` is used to retrieve `emp_name` from the `employees` table and `dept_name` from the `departments` table where `dept_id` matches between the two tables.

### 2. Left Join

Left join returns all rows from the left table (`employees`), and the matched rows from the right table (`departments`). If there are no matching rows, NULL values are returned from the right table.

**Example:**

```sql
-- Left join example
SELECT employees.emp_name, departments.dept_name
FROM employees
LEFT JOIN departments ON employees.dept_id = departments.dept_id;
```

### 3. Right Join

Right join returns all rows from the right table (`departments`), and the matched rows from the left table (`employees`). If there are no matching rows, NULL values are returned from the left table.

**Example:**

```sql
-- Right join example
SELECT employees.emp_name, departments.dept_name
FROM employees
RIGHT JOIN departments ON employees.dept_id = departments.dept_id;
```

### 4. Full Outer Join (Not directly supported in MySQL)

MySQL does not directly support `FULL OUTER JOIN`, but it can be emulated using `UNION` of `LEFT JOIN` and `RIGHT JOIN`.

**Example:**

```sql
-- Full outer join example (emulated)
SELECT employees.emp_name, departments.dept_name
FROM employees
LEFT JOIN departments ON employees.dept_id = departments.dept_id
UNION
SELECT employees.emp_name, departments.dept_name
FROM employees
RIGHT JOIN departments ON employees.dept_id = departments.dept_id
WHERE employees.emp_name IS NULL OR departments.dept_name IS NULL;
```

### 5. Cross Join

Cross join returns the Cartesian product of the two tables, i.e., all possible combinations of rows.

**Example:**

```sql
-- Cross join example
SELECT employees.emp_name, departments.dept_name
FROM employees
CROSS JOIN departments;
```
